// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "practice": event Resource Client
//
// Command:
// $ goagen
// --design=github.com/danlock/goa-practice/design
// --out=$(GOPATH)/src/github.com/danlock/goa-practice/generated
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"golang.org/x/net/websocket"
	"net/http"
	"net/url"
)

// PublishEventPayload is the event publish action payload.
type PublishEventPayload struct {
	// Type specific data
	Data interface{} `bson:"data,omitempty" form:"data" json:"data,omitempty"`
	// Type of event
	Type string `bson:"type,omitempty" form:"type" json:"type,omitempty"`
}

// PublishEventPath computes a request path to the publish action of event.
func PublishEventPath(assetID string) string {
	param0 := assetID

	return fmt.Sprintf("/asset/%s/event/publish", param0)
}

// Create new event and publish on the queue
func (c *Client) PublishEvent(ctx context.Context, path string, payload *PublishEventPayload, contentType string) (*http.Response, error) {
	req, err := c.NewPublishEventRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewPublishEventRequest create the request corresponding to the publish action endpoint of the event resource.
func (c *Client) NewPublishEventRequest(ctx context.Context, path string, payload *PublishEventPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// ShowAllEventPath computes a request path to the showAll action of event.
func ShowAllEventPath(assetID string) string {
	param0 := assetID

	return fmt.Sprintf("/asset/%s/event/all", param0)
}

// Get all events associated with an asset
func (c *Client) ShowAllEvent(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowAllEventRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowAllEventRequest create the request corresponding to the showAll action endpoint of the event resource.
func (c *Client) NewShowAllEventRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// SubscribeEventPath computes a request path to the subscribe action of event.
func SubscribeEventPath(assetID string) string {
	param0 := assetID

	return fmt.Sprintf("/asset/%s/event/subscribe", param0)
}

// Listen to all events for an asset
func (c *Client) SubscribeEvent(ctx context.Context, path string) (*websocket.Conn, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "ws"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	url_ := u.String()
	cfg, err := websocket.NewConfig(url_, url_)
	if err != nil {
		return nil, err
	}
	return websocket.DialConfig(cfg)
}
