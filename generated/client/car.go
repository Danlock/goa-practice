// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "practice": car Resource Client
//
// Command:
// $ goagen
// --design=github.com/danlock/goa-practice/design
// --out=$(GOPATH)/src/github.com/danlock/goa-practice/generated
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateCarPath computes a request path to the create action of car.
func CreateCarPath() string {

	return fmt.Sprintf("/car/")
}

// Create car by id
func (c *Client) CreateCar(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCreateCarRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateCarRequest create the request corresponding to the create action endpoint of the car resource.
func (c *Client) NewCreateCarRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowCarPath computes a request path to the show action of car.
func ShowCarPath(carID int) string {
	param0 := strconv.Itoa(carID)

	return fmt.Sprintf("/car/%s", param0)
}

// Get car by id
func (c *Client) ShowCar(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowCarRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowCarRequest create the request corresponding to the show action endpoint of the car resource.
func (c *Client) NewShowCarRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
