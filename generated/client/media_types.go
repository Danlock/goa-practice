// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "practice": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/danlock/goa-practice/design
// --out=$(GOPATH)/src/github.com/danlock/goa-practice/generated
// --version=v1.3.1

package client

import (
	"github.com/globalsign/mgo/bson"
	"github.com/goadesign/goa"
	"net/http"
	"time"
	"unicode/utf8"
)

// An asset can be pretty much anything (default view)
//
// Identifier: application/vnd.asset+json; view=default
type Asset struct {
	// Object ID attribute
	ID *bson.ObjectId `bson:"_id,omitempty" form:"_id" json:"_id,omitempty"`
	// timestamp of when the asset was created
	CreatedAt *time.Time `bson:"createdAt,omitempty" form:"createdAt" json:"createdAt,omitempty"`
	// Type specific data
	Data *interface{} `bson:"data,omitempty" form:"data" json:"data,omitempty"`
	// Name of asset
	Name *string `bson:"name,omitempty" form:"name" json:"name,omitempty"`
	// Type of asset
	Type *string `bson:"type,omitempty" form:"type" json:"type,omitempty"`
	// timestamp of when the asset was updated
	UpdatedAt *time.Time `bson:"updatedAt,omitempty" form:"updatedAt" json:"updatedAt,omitempty"`
}

// Validate validates the Asset media type instance.
func (mt *Asset) Validate() (err error) {
	if mt.Name != nil {
		if utf8.RuneCountInString(*mt.Name) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, *mt.Name, utf8.RuneCountInString(*mt.Name), 3, true))
		}
	}
	if mt.Type != nil {
		if !(*mt.Type == "car") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.type`, *mt.Type, []interface{}{"car"}))
		}
	}
	return
}

// DecodeAsset decodes the Asset instance encoded in resp body.
func (c *Client) DecodeAsset(resp *http.Response) (*Asset, error) {
	var decoded Asset
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// AssetCollection is the media type for an array of Asset (default view)
//
// Identifier: application/vnd.asset+json; type=collection; view=default
type AssetCollection []*Asset

// Validate validates the AssetCollection media type instance.
func (mt AssetCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeAssetCollection decodes the AssetCollection instance encoded in resp body.
func (c *Client) DecodeAssetCollection(resp *http.Response) (AssetCollection, error) {
	var decoded AssetCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Status  of API and connections to remote services (default view)
//
// Identifier: application/vnd.status+json; view=default
type Status struct {
	// Is database connected and working?
	Database bool `form:"database" json:"database" xml:"database"`
}

// DecodeStatus decodes the Status instance encoded in resp body.
func (c *Client) DecodeStatus(resp *http.Response) (*Status, error) {
	var decoded Status
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
