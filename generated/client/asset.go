// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "practice": asset Resource Client
//
// Command:
// $ goagen
// --design=github.com/danlock/goa-practice/design
// --out=$(GOPATH)/src/github.com/danlock/goa-practice/generated
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateAssetPayload is the asset create action payload.
type CreateAssetPayload struct {
	// Type specific data
	Data interface{} `bson:"data,omitempty" form:"data" json:"data,omitempty"`
	// Name of asset
	Name string `bson:"name,omitempty" form:"name" json:"name,omitempty"`
	// Type of asset
	Type string `bson:"type,omitempty" form:"type" json:"type,omitempty"`
}

// CreateAssetPath computes a request path to the create action of asset.
func CreateAssetPath() string {

	return fmt.Sprintf("/asset")
}

// Create new assets
func (c *Client) CreateAsset(ctx context.Context, path string, payload *CreateAssetPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateAssetRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateAssetRequest create the request corresponding to the create action endpoint of the asset resource.
func (c *Client) NewCreateAssetRequest(ctx context.Context, path string, payload *CreateAssetPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteAssetPath computes a request path to the delete action of asset.
func DeleteAssetPath(assetID string) string {
	param0 := assetID

	return fmt.Sprintf("/asset/%s", param0)
}

// Delete specific asset
func (c *Client) DeleteAsset(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteAssetRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteAssetRequest create the request corresponding to the delete action endpoint of the asset resource.
func (c *Client) NewDeleteAssetRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowAssetPath computes a request path to the show action of asset.
func ShowAssetPath(assetID string) string {
	param0 := assetID

	return fmt.Sprintf("/asset/%s", param0)
}

// Get specific asset
func (c *Client) ShowAsset(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowAssetRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowAssetRequest create the request corresponding to the show action endpoint of the asset resource.
func (c *Client) NewShowAssetRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowAllAssetPath computes a request path to the showAll action of asset.
func ShowAllAssetPath() string {

	return fmt.Sprintf("/asset")
}

// Get all assets
func (c *Client) ShowAllAsset(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowAllAssetRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowAllAssetRequest create the request corresponding to the showAll action endpoint of the asset resource.
func (c *Client) NewShowAllAssetRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateAssetPayload is the asset update action payload.
type UpdateAssetPayload struct {
	// Type specific data
	Data *interface{} `bson:"data,omitempty" form:"data" json:"data,omitempty"`
	// Name of asset
	Name *string `bson:"name,omitempty" form:"name" json:"name,omitempty"`
	// Type of asset
	Type *string `bson:"type,omitempty" form:"type" json:"type,omitempty"`
}

// UpdateAssetPath computes a request path to the update action of asset.
func UpdateAssetPath(assetID string) string {
	param0 := assetID

	return fmt.Sprintf("/asset/%s", param0)
}

// Update specific asset
func (c *Client) UpdateAsset(ctx context.Context, path string, payload *UpdateAssetPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateAssetRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateAssetRequest create the request corresponding to the update action endpoint of the asset resource.
func (c *Client) NewUpdateAssetRequest(ctx context.Context, path string, payload *UpdateAssetPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
