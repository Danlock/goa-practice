// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "practice": officer Resource Client
//
// Command:
// $ goagen
// --design=github.com/danlock/goa-practice/design
// --out=$(GOPATH)/src/github.com/danlock/goa-practice/generated
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"golang.org/x/net/websocket"
	"net/http"
	"net/url"
)

// CreateOfficerPath computes a request path to the create action of officer.
func CreateOfficerPath() string {

	return fmt.Sprintf("/officer/")
}

// Create officer by id
func (c *Client) CreateOfficer(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCreateOfficerRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateOfficerRequest create the request corresponding to the create action endpoint of the officer resource.
func (c *Client) NewCreateOfficerRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListenOfficerPath computes a request path to the listen action of officer.
func ListenOfficerPath() string {

	return fmt.Sprintf("/officer/echo")
}

// Create officer by id
func (c *Client) ListenOfficer(ctx context.Context, path string) (*websocket.Conn, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "ws"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	url_ := u.String()
	cfg, err := websocket.NewConfig(url_, url_)
	if err != nil {
		return nil, err
	}
	return websocket.DialConfig(cfg)
}
