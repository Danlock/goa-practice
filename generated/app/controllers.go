// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "practice": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/danlock/goa-practice/design
// --out=$(GOPATH)/src/github.com/danlock/goa-practice/generated
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// CarController is the controller interface for the Car actions.
type CarController interface {
	goa.Muxer
	Create(*CreateCarContext) error
	Show(*ShowCarContext) error
}

// MountCarController "mounts" a Car resource controller on the given service.
func MountCarController(service *goa.Service, ctrl CarController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateCarContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/car/", ctrl.MuxHandler("create", h, nil))
	service.LogInfo("mount", "ctrl", "Car", "action", "Create", "route", "POST /car/")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowCarContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/car/:carID", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Car", "action", "Show", "route", "GET /car/:carID")
}

// OfficerController is the controller interface for the Officer actions.
type OfficerController interface {
	goa.Muxer
	Create(*CreateOfficerContext) error
	Listen(*ListenOfficerContext) error
}

// MountOfficerController "mounts" a Officer resource controller on the given service.
func MountOfficerController(service *goa.Service, ctrl OfficerController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateOfficerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/officer/", ctrl.MuxHandler("create", h, nil))
	service.LogInfo("mount", "ctrl", "Officer", "action", "Create", "route", "POST /officer/")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListenOfficerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Listen(rctx)
	}
	service.Mux.Handle("GET", "/officer/echo", ctrl.MuxHandler("listen", h, nil))
	service.LogInfo("mount", "ctrl", "Officer", "action", "Listen", "route", "GET /officer/echo")
}
